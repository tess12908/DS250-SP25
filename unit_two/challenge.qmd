---
title: "Client Report - Longevity of Baseball Players"
subtitle: "Unit 2 Task 3"
author: "[STUDENT NAME]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---


```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## Question: 
Write an SQL query that provides a summary table showing the average salary for each position (e.g., pitcher, catcher, outfielder). Position information can be found in the fielding table in the POS column.
Include the following columns:

- position
- average_salary
- total_players
- highest_salary
The highest_salary column should display the highest salary ever earned by a player in that position.

Additionally, create a new column called salary_category using a case statement:

If the average salary is above $3 million, categorize it as “High Salary.”
If the average salary is between $2 million and $3 million, categorize it as “Medium Salary.”
Otherwise, categorize it as “Low Salary.”
Order the table by average salary in descending order.

Hint: Beware, it is common for a player to play multiple positions in a single year. For this analysis, each player’s salary should only be counted toward one position in a given year: the position at which they played the most games that year. This will likely require a (sub-query)

```{python}
query = """
-- For each player and year, add up the number of games (G) they played at each position (POS), then ranks it 
WITH primary_position AS (
    SELECT playerID, yearID, POS,
           SUM(G) AS games_played,
           RANK() OVER (PARTITION BY playerID, yearID ORDER BY SUM(G) DESC) AS rank
    FROM fielding
    GROUP BY playerID, yearID, POS
),

-- Filters to keep just the main position (the one with the most games) for each player each year.
main_position AS (
    SELECT playerID, yearID, POS
    FROM primary_position
    WHERE rank = 1
),

-- Mixes main position with salaries 
salary_by_position AS (
    SELECT mp.POS AS position,
           s.playerID,
           s.salary
    FROM salaries s
    JOIN main_position mp ON s.playerID = mp.playerID AND s.yearID = mp.yearID
)

-- Makes the final summary table
SELECT 
    position,
    ROUND(AVG(salary), 2) AS average_salary,
    COUNT(DISTINCT playerID) AS total_players,
    MAX(salary) AS highest_salary,
    CASE
        WHEN AVG(salary) > 3000000 THEN 'High Salary'
        WHEN AVG(salary) BETWEEN 2000000 AND 3000000 THEN 'Medium Salary'
        ELSE 'Low Salary'
    END AS salary_category
FROM salary_by_position
GROUP BY position
ORDER BY average_salary DESC;
"""

position_salary_summary = pd.read_sql(query, con)
position_salary_summary
